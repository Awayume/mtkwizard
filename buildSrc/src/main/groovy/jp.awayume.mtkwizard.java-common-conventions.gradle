import java.time.ZonedDateTime
import java.time.ZoneOffset

import java.util.regex.Pattern


plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'

    id 'com.github.johnrengelman.shadow'
    id 'net.ltgt.errorprone'
    id 'org.checkerframework'
}


repositories {
    mavenCentral()
}


dependencies {
    // log4j
    def log4jVersion = '2.23.1'
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    // JUnit 4
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // Checkstyle
    checkstyle 'com.puppycrawl.tools:checkstyle:10.17.0'

    // PMD
    def pmdVersion = '7.2.0'
    pmd "net.sourceforge.pmd:pmd-ant:${pmdVersion}"
    pmd "net.sourceforge.pmd:pmd-java:${pmdVersion}"

    // Checker Framework
    def checkerFrameworkVersion = '3.42.0'
    compileOnly "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    testCompileOnly "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"

    // Error Prone
    def errorProneVersion = '2.10.0'
    compileOnly "com.google.errorprone:error_prone_annotations:${errorProneVersion}"
    errorprone "com.google.errorprone:error_prone_core:${errorProneVersion}"
}


def _ = { ->  // define _ to avoid compile error
    def describe = 'git describe --always --dirty --broken'.execute().text.trim()
    def tagPattern = Pattern.compile('^v\\d+\\.\\d+\\.\\d+(-(alpha|beta|rc)(\\.\\d+)?)?')
    def tagMatcher = tagPattern.matcher(describe)

    if (tagMatcher.find()) {
        if (describe.matches(tagPattern)) {
            project.metaClass.buildType = 'release'
            project.version = describe.substring(1)
        } else {
            project.metaClass.buildType = 'debug'
            project.version = describe.substring(1) + '-SNAPSHOT'
        }
    } else {
        project.metaClass.buildType = 'debug'
        project.version = describe + '-SNAPSHOT'
    }
    project.metaClass.revision = 'git rev-parse HEAD'.execute().text.trim()
}()


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}


compileJava {
    options.compilerArgs << '-Xlint:all,-processing,-static'
}


jar {
    manifest {
        attributes 'Author': 'Awayume <dev@awayume.jp>'
        attributes 'Build-Type': project.buildType
        attributes 'Created-At': ZonedDateTime.now(ZoneOffset.UTC)
        attributes 'Description': 'A tool to flash MediaTek devices.'
        attributes 'Version': project.version
        attributes 'Revision': project.revision
    }
    entryCompression = ZipEntryCompression.STORED
}


checkerFramework {
    def astubFiles = fileTree(dir: 'src/main/annotated', include: '**/*.astub')
    checkers = [
        'org.checkerframework.checker.nullness.NullnessChecker',
    ]
    extraJavacArgs += [
        '-AwarnUnneededSuppressions',
        '-ArequirePrefixInWarningSuppressions',
        '-AshowPrefixInWarningMessages',
    ]
    if (!astubFiles.isEmpty()) {
        extraJavacArgs << '-Astubs=' + astubFiles.join(File.pathSeparator)
    }
}


checkstyle {
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}


pmd {
    consoleOutput = true
    ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
    ruleSets = []
}


tasks.named('test') {
    useJUnitPlatform()
}
